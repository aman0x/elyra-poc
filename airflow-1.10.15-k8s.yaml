# Test namespace for the integrated deployment
apiVersion: v1
kind: Namespace
metadata:
  name: airflow-elyra
---
# ServiceAccount and RBAC Resources for Airflow
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airflow
  namespace: airflow-elyra
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: airflow-role
  namespace: airflow-elyra
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: airflow-rolebinding
  namespace: airflow-elyra
subjects:
- kind: ServiceAccount
  name: airflow
  namespace: airflow-elyra
roleRef:
  kind: Role
  name: airflow-role
  apiGroup: rbac.authorization.k8s.io
---
# ConfigMap for Airflow configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  namespace: airflow-elyra
data:
  airflow.cfg: |
    [core]
    executor = LocalExecutor
    sql_alchemy_conn = postgresql+psycopg2://postgres:postgres@postgresql.airflow-elyra.svc.cluster.local:5432/airflow
    load_examples = False
    dags_folder = /opt/airflow/dags
    fernet_key = 9UGshNRJ_zq-E2RLpcJRPNFW5zEL5Xv9aCMjQQRKoxI=
    
    [webserver]
    web_server_host = 0.0.0.0
    web_server_port = 8080
    authenticate = False
    expose_config = True
    
    [scheduler]
    job_heartbeat_sec = 5
    scheduler_heartbeat_sec = 5
---
# Git-sync ConfigMap with improved script
apiVersion: v1
kind: ConfigMap
metadata:
  name: git-sync-config
  namespace: airflow-elyra
data:
  git-sync.sh: |
    #!/bin/sh
    # Initial clone
    git clone --single-branch --branch main https://github.com/victorfonseca/elyra-poc.git /tmp/repo
    mkdir -p /opt/airflow/dags
    
    # Initial sync - only if directory exists
    if [ -d "/tmp/repo/tests/dags" ]; then
      cp -r /tmp/repo/tests/dags/* /opt/airflow/dags/
      echo "Initial DAGs synchronized successfully"
    else
      echo "Warning: /tmp/repo/tests/dags directory not found during initial sync"
    fi
    
    # Continuous sync every 60 seconds
    while true; do
      echo "Syncing repository..."
      cd /tmp/repo && git pull
      
      # Clean destination directory first (preserve __pycache__)
      find /opt/airflow/dags -type f -name "*.py" -delete
      
      # Copy only if the directory exists
      if [ -d "/tmp/repo/tests/dags" ]; then
        cp -r /tmp/repo/tests/dags/* /opt/airflow/dags/
        echo "DAGs synchronized successfully"
      else
        echo "Warning: /tmp/repo/tests/dags directory not found"
      fi
      
      sleep 60
    done
---
# PVC for DAGs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags-pvc
  namespace: airflow-elyra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# PostgreSQL deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
  namespace: airflow-elyra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      containers:
      - name: postgresql
        image: postgres:11
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_DB
          value: airflow
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgresql-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres-data
      volumes:
      - name: postgresql-data
        emptyDir: {}
---
# PostgreSQL service
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: airflow-elyra
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432
---
# Airflow initialization job
apiVersion: batch/v1
kind: Job
metadata:
  name: airflow-init
  namespace: airflow-elyra
spec:
  template:
    spec:
      serviceAccountName: airflow
      restartPolicy: Never
      containers:
      - name: airflow-init
        image: apache/airflow:1.10.15
        command:
        - "/bin/bash"
        - "-c"
        - |
          airflow version
          sleep 10  # Wait for PostgreSQL to be ready
          export AIRFLOW__CORE__SQL_ALCHEMY_CONN="postgresql+psycopg2://postgres:postgres@postgresql.airflow-elyra.svc.cluster.local:5432/airflow"
          airflow initdb
          echo "Airflow database initialized"
---
# Airflow Webserver deployment with git-sync container
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  namespace: airflow-elyra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-webserver
  template:
    metadata:
      labels:
        app: airflow-webserver
    spec:
      serviceAccountName: airflow
      containers:
      - name: airflow-webserver
        image: apache/airflow:1.10.15
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: airflow-config
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: dags
          mountPath: /opt/airflow/dags
        command:
        - "/bin/bash"
        - "-c"
        - |
          echo "Starting Airflow Webserver..."
          airflow webserver
      - name: git-sync
        image: alpine/git:latest
        command: ["/bin/sh", "-c"]
        args: ["sh /configmap/git-sync.sh"]
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: git-sync-config
          mountPath: /configmap
      volumes:
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: git-sync-config
        configMap:
          name: git-sync-config
          defaultMode: 0755
---
# Airflow Scheduler deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: airflow-elyra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      serviceAccountName: airflow
      containers:
      - name: airflow-scheduler
        image: apache/airflow:1.10.15
        volumeMounts:
        - name: airflow-config
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: dags
          mountPath: /opt/airflow/dags
        command:
        - "/bin/bash"
        - "-c"
        - |
          echo "Starting Airflow Scheduler..."
          airflow scheduler
      volumes:
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
---
# Airflow Webserver Service
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver
  namespace: airflow-elyra
spec:
  type: NodePort
  selector:
    app: airflow-webserver
  ports:
  - port: 8080
    targetPort: 8080
---
# ------------------ ELYRA COMPONENTS ------------------

# ConfigMap for storing elyra-metadata CLI script
apiVersion: v1
kind: ConfigMap
metadata:
  name: elyra-metadata-script
  namespace: airflow-elyra
data:
  setup-catalog.sh: |
    #!/bin/bash
    set -e
    
    # Create directories for metadata
    mkdir -p /home/jovyan/.local/share/jupyter/metadata/component-catalogs/
    
    # Create the Airflow package catalog using the CLI tool
    echo "Creating Airflow package catalog..."
    elyra-metadata create component-catalogs \
      --schema_name=airflow-package-catalog \
      --name="airflow-1-10-15" \
      --display_name="Apache Airflow 1.10.15 Components" \
      --description="Apache Airflow 1.10.15 operators and components" \
      --runtime_type="APACHE_AIRFLOW" \
      --categories="Core packages" \
      --airflow_package_download_url="https://files.pythonhosted.org/packages/f0/3a/f5ce74b2bdbbe59c925bb3398ec0781b66a64b8a23e2f6adc7ab9f1005d9/apache_airflow-1.10.15-py2.py3-none-any.whl" \
      --search_contrib=true
    
    # List catalogs to verify
    echo "Verifying catalog was created:"
    elyra-metadata list component-catalogs
    
    # Fix permissions
    chown -R jovyan:users /home/jovyan/.local/share/jupyter/metadata/
    
    echo "Airflow catalog configuration completed successfully"
---
# PersistentVolumeClaim for Elyra data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elyra-data-pvc
  namespace: airflow-elyra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# PersistentVolumeClaim for Elyra work directory
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elyra-work-pvc
  namespace: airflow-elyra
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Elyra Deployment with Airflow Catalog
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elyra
  namespace: airflow-elyra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elyra
  template:
    metadata:
      labels:
        app: elyra
    spec:
      initContainers:
      - name: init-catalogs
        image: elyra/elyra:3.15.0
        command: ["/bin/bash", "-c"]
        args:
        - |
          echo "Running component catalog setup script..."
          /scripts/setup-catalog.sh
        volumeMounts:
        - name: elyra-metadata-scripts
          mountPath: /scripts
        - name: elyra-data
          mountPath: /home/jovyan/.local
      containers:
      - name: elyra
        image: elyra/elyra:3.15.0
        ports:
        - containerPort: 8888
        env:
        - name: JUPYTER_ENABLE_LAB
          value: "yes"
        - name: JUPYTER_TOKEN
          value: "dGf7Hs9pKl2Mn6Qw3rT5yUi8oP1aZ0bX"
        # Configure Elyra to be aware of the Airflow service in the same namespace
        - name: ELYRA_AIRFLOW_URL
          value: "http://airflow-webserver.airflow-elyra.svc.cluster.local:8080"
        command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
        volumeMounts:
        - name: elyra-data
          mountPath: /home/jovyan/.local
        - name: elyra-work
          mountPath: /home/jovyan/work
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        readinessProbe:
          httpGet:
            path: /lab
            port: 8888
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /lab
            port: 8888
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: elyra-metadata-scripts
        configMap:
          name: elyra-metadata-script
          defaultMode: 0755
      - name: elyra-data
        persistentVolumeClaim:
          claimName: elyra-data-pvc
      - name: elyra-work
        persistentVolumeClaim:
          claimName: elyra-work-pvc
---
# Elyra Service
apiVersion: v1
kind: Service
metadata:
  name: elyra
  namespace: airflow-elyra
spec:
  selector:
    app: elyra
  ports:
  - port: 8888
    targetPort: 8888
  type: NodePort